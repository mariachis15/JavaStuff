public class Employee implements Comparable<Employee> {
    private String name;
    private int age;
    private double salary;

    public Employee(String name, int age, double salary) {
        this.name = name;
        this.age = age;
        this.salary = salary;
    }

    public Employee() {

    }

    public int compareTo(Employee employee) {
        return this.name.compareTo(employee.getName());
    }

    @Override
    public String toString() {
        return name + " " + age + " " + salary;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public int getAge() {
        return age;
    }

    public void setAge(int age) {
        this.age = age;
    }

    public double getSalary() {
        return salary;
    }

    public void setSalary(double salary) {
        this.salary = salary;
    }
}

import java.util.Comparator;

public class CompareByName implements Comparator<Employee> {
    @Override
    public int compare(Employee employee1, Employee employee2) {
        return employee1.getName().compareTo(employee2.getName());
    }
}


import java.util.Comparator;

public class CompareBySalary implements Comparator<Employee> {

    @Override
    public int compare(Employee employee1, Employee employee2) {
        if (employee2.getSalary() == employee1.getSalary()) {
            return 0;
        } else if (employee2.getSalary() > employee1.getSalary()) {
            return 1;
        }
        return -1;
    }
}

import java.util.*;

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.println("n = ");
        int n = sc.nextInt();
        sc.nextLine();
        List<Employee> employees = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            Employee employee = new Employee();
            employee.setName(sc.nextLine());
            employee.setAge(sc.nextInt());
            employee.setSalary(sc.nextDouble());
            sc.nextLine();
            employees.add(employee);
        }
        System.out.println("the list sorted in ascending order by name: ");
        Collections.sort(employees);
        for (Employee employee : employees) {
            System.out.println(employee);
        }
        System.out.println("the list sorted in descending order by age using lambda expression: ");
        Collections.sort(employees, (a1, a2) -> a2.getAge() - a1.getAge());
        for (Employee employee : employees) {
            System.out.println(employee);
        }
        System.out.println("the list sorted in ascending order by name using Comparator interface: ");
        Collections.sort(employees, new CompareByName());
        for (Employee employee : employees) {
            System.out.println(employee);
        }
        System.out.println("the list sorted in descending order by salary using Comparator interface: ");
        Collections.sort(employees, new CompareBySalary());
        for (Employee employee : employees) {
            System.out.println(employee);
        }
    }
}
